name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.25.x, 1.26.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x

    - name: Build binary
      run: |
        go build -v -o ext-authz .
        ./ext-authz --version || echo "Binary built successfully"

    - name: Build Docker image
      run: |
        docker build -t ext-authz-service:${{ github.sha }} .
        docker tag ext-authz-service:${{ github.sha }} ext-authz-service:latest

    - name: Test Docker image
      run: |
        docker run --rm ext-authz-service:latest --help || echo "Docker image works"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x

    - name: Build release binaries
      run: |
        GOOS=linux GOARCH=amd64 go build -o ext-authz-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -o ext-authz-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -o ext-authz-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o ext-authz-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -o ext-authz-windows-amd64.exe .

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ext-authz-linux-amd64
          ext-authz-linux-arm64
          ext-authz-darwin-amd64
          ext-authz-darwin-arm64
          ext-authz-windows-amd64.exe
        generate_release_notes: true
        draft: false
        prerelease: false
